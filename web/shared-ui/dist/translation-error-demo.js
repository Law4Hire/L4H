import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useTranslationErrorHandling } from './hooks/useTranslationErrorHandling';
import { translationErrorHandler } from './translation-error-handler';
import TranslationErrorNotification from './components/TranslationErrorNotification';
export function TranslationErrorDemo() {
    const [selectedLanguage, setSelectedLanguage] = useState('fr-FR');
    const [selectedNamespace, setSelectedNamespace] = useState('interview');
    const { hasErrors, isFallbackActive, isRetrying, canRetry, showNotification, retry, dismissNotification, loadingState, retryCount, failedLanguages } = useTranslationErrorHandling(selectedLanguage, selectedNamespace);
    const simulateError = () => {
        const error = new Error(`Simulated network error for ${selectedLanguage}/${selectedNamespace}`);
        translationErrorHandler.recordError(selectedLanguage, selectedNamespace, error);
    };
    const simulateSuccess = () => {
        translationErrorHandler.recordSuccess(selectedLanguage, selectedNamespace);
    };
    const simulateLoading = () => {
        translationErrorHandler.startLoading(selectedLanguage, selectedNamespace);
    };
    const clearAllErrors = () => {
        translationErrorHandler.clearErrors();
    };
    const errorStats = translationErrorHandler.getErrorStats();
    return (_jsxs("div", { style: { padding: '20px', fontFamily: 'Arial, sans-serif' }, children: [_jsx("h2", { children: "Translation Error Handling Demo" }), _jsxs("div", { style: { marginBottom: '20px' }, children: [_jsx("h3", { children: "Controls" }), _jsx("div", { style: { marginBottom: '10px' }, children: _jsxs("label", { children: ["Language:", _jsxs("select", { value: selectedLanguage, onChange: (e) => setSelectedLanguage(e.target.value), style: { marginLeft: '10px' }, children: [_jsx("option", { value: "fr-FR", children: "French (fr-FR)" }), _jsx("option", { value: "es-ES", children: "Spanish (es-ES)" }), _jsx("option", { value: "de-DE", children: "German (de-DE)" }), _jsx("option", { value: "ar-SA", children: "Arabic (ar-SA)" })] })] }) }), _jsx("div", { style: { marginBottom: '10px' }, children: _jsxs("label", { children: ["Namespace:", _jsxs("select", { value: selectedNamespace, onChange: (e) => setSelectedNamespace(e.target.value), style: { marginLeft: '10px' }, children: [_jsx("option", { value: "interview", children: "Interview" }), _jsx("option", { value: "common", children: "Common" }), _jsx("option", { value: "errors", children: "Errors" })] })] }) }), _jsxs("div", { style: { display: 'flex', gap: '10px', flexWrap: 'wrap' }, children: [_jsx("button", { onClick: simulateLoading, children: "Simulate Loading" }), _jsx("button", { onClick: simulateError, children: "Simulate Error" }), _jsx("button", { onClick: simulateSuccess, children: "Simulate Success" }), _jsx("button", { onClick: retry, disabled: !canRetry || isRetrying, children: isRetrying ? 'Retrying...' : 'Manual Retry' }), _jsx("button", { onClick: clearAllErrors, children: "Clear All Errors" })] })] }), _jsxs("div", { style: { marginBottom: '20px' }, children: [_jsx("h3", { children: "Current State" }), _jsxs("div", { style: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '10px' }, children: [_jsxs("div", { children: [_jsx("strong", { children: "Has Errors:" }), " ", hasErrors ? 'Yes' : 'No'] }), _jsxs("div", { children: [_jsx("strong", { children: "Fallback Active:" }), " ", isFallbackActive ? 'Yes' : 'No'] }), _jsxs("div", { children: [_jsx("strong", { children: "Is Retrying:" }), " ", isRetrying ? 'Yes' : 'No'] }), _jsxs("div", { children: [_jsx("strong", { children: "Can Retry:" }), " ", canRetry ? 'Yes' : 'No'] }), _jsxs("div", { children: [_jsx("strong", { children: "Show Notification:" }), " ", showNotification ? 'Yes' : 'No'] }), _jsxs("div", { children: [_jsx("strong", { children: "Retry Count:" }), " ", retryCount] })] }), failedLanguages.length > 0 && (_jsxs("div", { style: { marginTop: '10px' }, children: [_jsx("strong", { children: "Failed Languages:" }), " ", failedLanguages.join(', ')] }))] }), _jsxs("div", { style: { marginBottom: '20px' }, children: [_jsx("h3", { children: "Loading State Details" }), _jsx("pre", { style: { background: '#f5f5f5', padding: '10px', borderRadius: '4px', fontSize: '12px' }, children: JSON.stringify(loadingState, null, 2) })] }), _jsxs("div", { style: { marginBottom: '20px' }, children: [_jsx("h3", { children: "Global Error Statistics" }), _jsxs("div", { children: [_jsx("strong", { children: "Total Errors:" }), " ", errorStats.totalErrors] }), _jsxs("div", { children: [_jsx("strong", { children: "Recent Errors:" }), " ", errorStats.recentErrors.length] }), Object.keys(errorStats.errorsByLanguage).length > 0 && (_jsxs("div", { style: { marginTop: '10px' }, children: [_jsx("strong", { children: "Errors by Language:" }), _jsx("ul", { children: Object.entries(errorStats.errorsByLanguage).map(([lang, count]) => (_jsxs("li", { children: [lang, ": ", count] }, lang))) })] })), Object.keys(errorStats.errorsByNamespace).length > 0 && (_jsxs("div", { children: [_jsx("strong", { children: "Errors by Namespace:" }), _jsx("ul", { children: Object.entries(errorStats.errorsByNamespace).map(([ns, count]) => (_jsxs("li", { children: [ns, ": ", count] }, ns))) })] }))] }), _jsxs("div", { children: [_jsx("h3", { children: "Instructions" }), _jsxs("ol", { children: [_jsx("li", { children: "Select a language and namespace combination" }), _jsx("li", { children: "Click \"Simulate Error\" to trigger an error for that combination" }), _jsx("li", { children: "Notice how the error state updates and a notification appears" }), _jsx("li", { children: "Try \"Manual Retry\" to retry loading" }), _jsx("li", { children: "Simulate multiple errors to see retry count increase and fallback activation" }), _jsx("li", { children: "Use \"Simulate Success\" to clear error state" }), _jsx("li", { children: "Try different language/namespace combinations to see independent error tracking" })] })] }), showNotification && (_jsx(TranslationErrorNotification, { language: selectedLanguage, onRetry: retry, onDismiss: dismissNotification }))] }));
}
export default TranslationErrorDemo;
